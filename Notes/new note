
ðŸ“˜ Section 1 â€” Basics & Document Structure (tags + per-tag code with comments)

<!DOCTYPE html>

Declares the document as HTML5. Must be the first line in the file so browsers use modern parsing mode.

<!-- <!DOCTYPE html> must appear at the very top to enable standards mode -->
<!DOCTYPE html>


---

<html>

The root element. Important attributes: lang (language), dir (text direction), class, id.

<!-- <html> is the root. lang helps screen readers/search engines, dir controls direction -->
<html lang="en" dir="ltr" class="page-root" id="doc-root">
  <!-- Document content goes here -->
</html>


---

<head>

Container for metadata: title, meta tags, links to CSS, scripts that should load before body, etc.

<!-- <head> holds metadata and references (not visible content) -->
<head>
  <!-- meta, title, link, script go here -->
</head>


---

<meta>

Provides metadata. Common attributes: charset, name + content, http-equiv, viewport.

<!-- Character encoding (must be early) -->
<meta charset="utf-8">

<!-- SEO / description -->
<meta name="description" content="Short page description">

<!-- Responsive layout on mobile -->
<meta name="viewport" content="width=device-width, initial-scale=1">

<!-- http-equiv can act like an HTTP header (use sparingly) -->
<meta http-equiv="refresh" content="30"> <!-- reloads after 30s -->


---

<title>

Sets the page title shown in the browser tab and used by search engines.

<!-- Title text appears on the browser tab and in bookmarks -->
<title>My Page Title</title>


---

<base>

Sets a base URL for relative links; rarely used but handy for documents with many relative URLs. Attributes: href, target.

<!-- base affects how relative URLs are resolved -->
<base href="https://example.com/docs/" target="_blank">
<!-- Now <a href="page.html"> loads https://example.com/docs/page.html and opens in _blank by default -->


---

<link>

Links external resources. Important attributes: rel, href, type, media, sizes, as, crossorigin.

<!-- Link to stylesheet -->
<link rel="stylesheet" href="styles.css" type="text/css" media="screen">

<!-- Favicon with size -->
<link rel="icon" href="/favicon-32.png" type="image/png" sizes="32x32">

<!-- Preload critical resources -->
<link rel="preload" href="main.js" as="script">

<!-- Preconnect to a resource origin (performance hint) -->
<link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>


---

<style>

Inline CSS block. Attribute media lets you target specific media (screen/print).

<!-- Inline CSS for quick styles (prefer external .css for real projects) -->
<style media="screen">
  body { font-family: Arial, sans-serif; }
  .lead { font-size: 1.1rem; }
</style>


---

<script>

Includes JS inline or external. Important attributes: src, type, async, defer, nomodule, integrity, crossorigin, nonce.

<!-- External script loaded after HTML parsing (defer preserves order) -->
<script src="app.js" defer integrity="sha384-abc..." crossorigin="anonymous"></script>

<!-- Inline module script (use when you're using ES modules) -->
<script type="module">
  // ES module code here
  import { init } from './module.js';
  init();
</script>

<!-- Async script: fetched & executed immediately when ready (order not guaranteed) -->
<script src="analytics.js" async></script>

<!-- nomodule: only run in browsers that DO NOT support modules (legacy fallback) -->
<script nomodule src="legacy.js"></script>


---

<noscript>

Shown only if JavaScript is disabled. Useful to warn users or provide fallback content.

<noscript>
  <!-- Shown when JS is disabled -->
  <p>JavaScript is required for some functionality â€” enable it for best experience.</p>
</noscript>


---

<body>

Contains all visible content. Attributes: onload (JS), class, id, role.

<!-- <body> is rendered. Keep only page content here -->
<body class="site-body" id="home">
  <!-- visible content goes here -->
</body>


---

Headings: <h1> â€¦ <h6>

Hierarchical document headings; use one <h1> per page for main title. Attributes: global only (id, class).

<!-- Heading levels; use them to convey document structure -->
<h1 id="page-title">Main Title</h1> <!-- primary, for SEO & screen readers -->
<h2>Section title</h2>
<h3>Subsection</h3>


---

<p>

Paragraph block. Use for text. align attribute exists but is deprecated (use CSS). Other attributes: dir, lang, class, id.

<!-- Paragraph example. Use CSS for alignment nowadays -->
<p class="intro">This paragraph introduces the topic.</p>

<!-- Deprecated align attribute (works but avoid in production) -->
<p align="center">Centered with deprecated align attribute (prefer CSS).</p>


---

<br>

Line break (use rarely; prefer CSS for spacing).

<!-- Line break inserts a new line -->
<p>Line one<br><!-- line break -->Line two</p>


---

<hr>

Thematic break (horizontal rule). Represents a change in topic/section.

<!-- Thematic break; use for paragraph-level separation -->
<p>End of section</p>
<hr>
<p>New topic begins here</p>


---

âœ… Combined Section-1 example (all basics in one skeleton)

This full skeleton demonstrates the tags above in context and includes comments that explain attribute behavior.

<!DOCTYPE html> <!-- HTML5 doctype -->
<html lang="en"> <!-- lang helps accessibility & SEO -->
<head>
  <meta charset="utf-8"> <!-- must be early for correct encoding -->
  <meta name="viewport" content="width=device-width, initial-scale=1"> <!-- responsive -->
  <title>Basics Example</title>
  <!-- external CSS -->
  <link rel="stylesheet" href="styles.css">
  <!-- preload script to hint browser -->
  <link rel="preload" href="main.js" as="script">
  <!-- inline CSS (small, fallback) -->
  <style> .note { color: #333; } </style>
  <!-- defer script loads after parsing, keeps order among defers -->
  <script src="main.js" defer></script>
</head>
<body>
  <header>
    <h1 id="title">Course: Frontend Basics</h1> <!-- main title -->
  </header>

  <main>
    <p class="lead">This is the introduction paragraph for the page.</p>
    <p>First line<br>Second line <!-- demonstration of <br> --> </p>
    <hr><!-- indicates thematic separation -->
  </main>

  <footer>
    <p>&copy; 2025</p>
  </footer>
</body>
</html>


---

ðŸ“˜ Section 2 â€” Semantic Structure (tags + per-tag code/comments)

<header>

Top area of a page/section (logo, nav, page intro). No special attrs beyond global ones; can carry role="banner" for ARIA.

<!-- Header for page intro and nav -->
<header role="banner" class="site-header">
  <img src="logo.png" alt="Site logo" width="120"> <!-- logo inside header -->
  <h1>Site Name</h1>
</header>


---

<nav>

Container for navigation links. Add aria-label when there are multiple nav blocks.

<!-- Main navigation with ARIA label -->
<nav aria-label="Primary navigation">
  <a href="/index.html">Home</a> |
  <a href="/about.html">About</a> |
  <a href="/contact.html">Contact</a>
</nav>


---

<main>

Holds the primary page content (only one main per page). Use role="main" if necessary for older assistive tech.

<!-- Main content should be unique to the document -->
<main id="main-content" role="main">
  <h2>Welcome</h2>
  <p>Main content appears here.</p>
</main>


---

<section>

Thematic grouping with a heading. Use aria-labelledby or headings for accessibility.

<!-- Thematic section with heading -->
<section id="features" aria-labelledby="features-heading">
  <h2 id="features-heading">Features</h2>
  <p>Each feature is described below.</p>
</section>


---

<article>

Self-contained content (blog post, news item). Can be syndicated.

<!-- Article that could stand alone -->
<article id="post-123">
  <h3>How to learn HTML</h3>
  <p>Published: <time datetime="2025-09-11">Sep 11, 2025</time></p>
  <p>Article body...</p>
</article>


---

<aside>

Tangential content (sidebars, pull quotes). Use aria-label if needed.

<!-- Sidebar content related to main article -->
<aside aria-label="Related resources">
  <h4>Related</h4>
  <ul>
    <li><a href="#">Reference 1</a></li>
  </ul>
</aside>


---

<footer>

Footer for a page or section (copyright, author info).

<!-- Footer content -->
<footer>
  <p>&copy; 2025 MySite</p>
  <nav aria-label="Footer links">
    <a href="/privacy">Privacy</a>
  </nav>
</footer>


---

<address>

Contact info for nearest ancestor (person/company). Use semantic contact info.

<!-- Contact information -->
<address>
  Contact: <a href="mailto:admin@example.com">admin@example.com</a><br>
  123 Example St, City
</address>


---

âœ… Combined Section-2 example (semantic layout)

Single-page example showing header, nav, main, section, article, aside, footer â€” comments explain attribute choices.

<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="utf-8">
  <title>Semantic Layout</title>
</head>
<body>

  <!-- Page header with banner role for accessibility -->
  <header role="banner">
    <h1>My Website</h1>
    <!-- Primary navigation -->
    <nav aria-label="Primary">
      <a href="#home">Home</a>
      <a href="#blog">Blog</a>
      <a href="#contact">Contact</a>
    </nav>
  </header>

  <!-- Main content area -->
  <main>
    <!-- Section grouping related content -->
    <section id="home" aria-labelledby="home-title">
      <h2 id="home-title">Welcome</h2>
      <p>Introductory content...</p>
    </section>

    <!-- Article: independent content -->
    <article>
      <h2>Blog Post Title</h2>
      <p>By <span class="author">Author</span> on
         <time datetime="2025-09-11">Sep 11, 2025</time></p>
      <p>Article content...</p>
    </article>

    <!-- Aside: tangential content -->
    <aside aria-label="Sidebar">
      <h3>Resources</h3>
      <ul><li><a href="#">Cheatsheet</a></li></ul>
    </aside>
  </main>

  <!-- Page footer -->
  <footer>
    <p>&copy; 2025 Company</p>
  </footer>

</body>
</html>


---

ðŸ“˜ Section 3 â€” Text Formatting & Inline Tags (tags + per-tag code/comments)

> These are inline/phrase tags â€” use them inside block elements like <p>, <li>, <td>.



<b>

Stylistic bold; conveys no extra meaning. Use for purely visual bolding.

<!-- <b> is for stylistic bold only -->
<p>This is a <b>bold</b> word (stylistic).</p>


---

<strong>

Semantic importance; screen readers emphasize it.

<!-- <strong> signals important content (semantic) -->
<p>Please <strong>do not</strong> share your password.</p>


---

<i>

Stylistic italic (e.g., for alternate voice). Prefer <em> for emphasis semantics.

<!-- <i> used for a foreign phrase or technical term -->
<p>He said <i>carpe diem</i> in the speech.</p>


---

<em>

Semantic emphasis â€” screen readers give stress.

<!-- <em> used when the emphasis matters to meaning -->
<p>You <em>must</em> submit the form.</p>


---

<u>

Underlines text (presentational). In HTML5 it is valid for non-link underlines (e.g., proper names).

<!-- <u> for non-link underlined text (stylistic) -->
<p>This is an <u>underlined</u> term.</p>


---

<mark>

Highlights text (like search result). Default styling is yellow highlight.

<!-- <mark> used to highlight important text -->
<p>Search result: <mark>keyword</mark> appears here.</p>


---

<small>

Smaller print (fine print, legal text).

<!-- <small> reduces font size for disclaimers -->
<p>Price: $10 <small>(GST included)</small></p>


---

<del>

Deleted content (rendered struck-through). Use when showing removed text.

<!-- <del> used to show removed/old text -->
<p><del>$50</del> $30</p>


---

<ins>

Inserted content (often underlined). Use for additions.

<!-- <ins> used to show newly inserted text -->
<p>Policy update: <ins>Now includes 2-year warranty</ins></p>


---

<sup> / <sub>

Superscript / subscript for exponents, chemical formulas.

<p>2<sup>3</sup> = 8</p>
<p>H<sub>2</sub>O</p>


---

<abbr>

Abbreviation; title attribute gives expansion.

<!-- title shows full form on hover -->
<p><abbr title="HyperText Markup Language">HTML</abbr> is the markup language for the web.</p>


---

<code>

Inline code sample (monospace). Use escape entities for angle brackets when showing tags (e.g., &lt;div&gt;).

<!-- <code> for inline code or small snippets -->
<p>To create a division use <code>&lt;div&gt;</code> tag.</p>


---

<pre>

Preformatted block â€” preserves whitespace and line breaks. Often paired with <code> for code blocks.

<!-- Preformatted code block -->
<pre><code>function hello() {
  console.log("Hi");
}</code></pre>


---

<kbd>

Keyboard input â€” shows keys.

<p>Press <kbd>Ctrl</kbd> + <kbd>S</kbd> to save.</p>


---

<samp>

Sample program output.

<p>Output: <samp>File saved successfully</samp></p>


---

<var>

Represents a variable name.

<p>Area = <var>width</var> Ã— <var>height</var></p>


---

<q>

Short inline quote â€” browsers may add quotation marks. cite attribute can reference source.

<p>He said <q cite="https://example.com/speech">be kind</q>.</p>


---

<blockquote>

Long quotation (usually block-level). Use cite for source URL.

<blockquote cite="https://example.com/article">
  <p>This is a long quote from an article.</p>
</blockquote>


---

<cite>

Title of a creative work (book, article, song). Not for person names.

<p><cite>The Odyssey</cite> is a classic.</p>


---

<dfn>

Marks the defining instance of a term.

<p><dfn>Promise</dfn> â€” an object representing eventual completion (in JS).</p>


---

<time>

Represents a date/time. Use datetime for machine-readable value.

<p>Event: <time datetime="2025-09-15T18:00">September 15, 6:00pm</time></p>


---

ruby, rt, rp

Ruby annotations for East-Asian text (phonetic guides).

<ruby>
  æ¼¢ <rp>(</rp><rt>kan</rt><rp>)</rp>
</ruby>


---

<bdi> / <bdo>

<bdi> isolates directionality of text; <bdo dir="rtl"> forces direction override.

<!-- bdi isolates user input direction -->
<p>Username: <bdi>abc123</bdi></p>

<!-- bdo forces direction -->
<p><bdo dir="rtl">hello</bdo> <!-- rendered RTL --> </p>


---

<wbr>

Word break opportunity â€” suggests where long words may wrap.

<p>Supercalifragilistic<wbr>expialidocious</p>


---

âœ… Combined Section-3 example (many inline tags together)

This snippet shows many of the inline tags in one place with comments explaining use.

<p>
  <strong>Important:</strong> Use <em>semantic</em> tags where possible.
  This is <b>bold</b> and <i>italic</i>. Here's an <u>underlined</u> word.
  Example code: <code>console.log("Hello")</code>
</p>

<pre><code>// Preformatted block
function add(a, b) {
  return a + b;
}
</code></pre>

<p>Abbreviation: <abbr title="Cascading Style Sheets">CSS</abbr></p>
<p>Keyboard: <kbd>Ctrl</kbd>+<kbd>C</kbd> â€” Output: <samp>Copied!</samp></p>
<p>Formula: E = mc<sup>2</sup> and H<sub>2</sub>O</p>

<blockquote cite="https://example.com">
  <p>This is a block quote from a source.</p>
</blockquote>


---

ðŸ“˜ Section 4 â€” Links & Media (tags + per-tag code/comments)

<a> (anchor)

Creates hyperlinks. Important attributes: href, target, rel, download, hreflang, type, ping, referrerpolicy.

<!-- Basic link -->
<a href="https://example.com">Visit example.com</a>

<!-- Open in new tab and secure it with rel -->
<a href="https://example.com" target="_blank" rel="noopener noreferrer" title="Example site">
  Open in new tab (noopener prevents window.opener attack)
</a>

<!-- Download attribute suggests file download and can specify filename -->
<a href="/files/report.pdf" download="report-2025.pdf">Download Report</a>


---

<img>

Embeds images. Important attributes: src, alt (required for meaningful images), width, height, srcset, sizes, loading, decoding, crossorigin, usemap, ismap, referrerpolicy.

<!-- Basic image with alt text for accessibility -->
<img src="logo.png" alt="Company Logo" width="200" height="80">

<!-- Responsive image candidates -->
<img src="image-800.jpg"
     srcset="image-400.jpg 400w, image-800.jpg 800w, image-1200.jpg 1200w"
     sizes="(max-width:600px) 400px, 800px"
     alt="A scenic view"
     loading="lazy"> <!-- lazy defers offscreen loading -->


---

<picture> & <source>

Art-direction and format selection (e.g., WebP fallback). The <img> inside <picture> is the fallback.

<picture>
  <!-- preferred modern WebP for browsers that support it -->
  <source type="image/webp" srcset="photo.webp">
  <!-- different image for narrow screens -->
  <source media="(max-width:600px)" srcset="photo-small.jpg">
  <!-- fallback -->
  <img src="photo.jpg" alt="Photo description" width="800">
</picture>


---

<figure> & <figcaption>

Group media (image, video, diagram) with a caption.

<figure>
  <img src="chart.png" alt="Sales chart">
  <figcaption>Figure 1 â€” Monthly sales chart</figcaption>
</figure>


---

<map> & <area> (image maps)

Define clickable regions on an image. <img usemap="#mapname"> references the <map> by name.

<img src="plan.png" alt="Site plan" usemap="#site-map">

<map name="site-map">
  <!-- rect: x1,y1,x2,y2 -->
  <area shape="rect" coords="34,44,270,350" href="zone1.html" alt="Zone 1">
  <!-- circle: x-center,y-center,radius -->
  <area shape="circle" coords="337,300,44" href="zone2.html" alt="Zone 2">
</map>


---

<audio>

Audio player. Attributes: src (or use <source>), controls, autoplay, loop, muted, preload.

<!-- Audio with multiple source formats for compatibility -->
<audio controls preload="metadata">
  <source src="audio.mp3" type="audio/mpeg">
  <source src="audio.ogg" type="audio/ogg">
  Your browser does not support the audio element.
</audio>

<!-- Autoplay requires muted in many browsers -->
<audio src="ambient.mp3" autoplay loop muted></audio>


---

<video> & <source> & <track>

Video tag with sources and captions. Attributes: controls, autoplay, loop, muted, poster, width, height, playsinline.

<video width="640" height="360" controls poster="poster.jpg">
  <!-- multiple formats for cross-browser support -->
  <source src="movie.mp4" type="video/mp4">
  <source src="movie.webm" type="video/webm">
  <!-- captions / subtitles -->
  <track kind="subtitles" src="subs_en.vtt" srclang="en" label="English" default>
  <!-- fallback text -->
  Your browser does not support the video tag.
</video>


---

<iframe>

Embeds another HTML page. Important attributes: src, srcdoc, name, sandbox, allow, width, height, loading, referrerpolicy, allowfullscreen.

<!-- Basic iframe embedding a YouTube video -->
<iframe width="560" height="315"
        src="https://www.youtube.com/embed/VIDEO_ID"
        title="YouTube video player"
        frameborder="0"
        allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture"
        allowfullscreen>
</iframe>

<!-- iframe with sandbox to restrict capabilities -->
<iframe src="widget.html" sandbox="allow-scripts allow-forms" loading="lazy"></iframe>


---

<embed> & <object> & <param>

General embedding (PDFs, plugins). <object> can include <param> children.

<!-- Embed PDF -->
<embed src="doc.pdf" type="application/pdf" width="600" height="400">

<!-- Object tag with param -->
<object data="interactive.swf" type="application/x-shockwave-flash" width="400" height="300">
  <param name="autoplay" value="true">
  Fallback content if object is unsupported.
</object>


---

âœ… Combined Section-4 example (links & media)

This example demonstrates <a>, <img>, <picture>, <audio>, <video>, <iframe>, and an image map â€” comments explain attributes.

<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="utf-8">
  <title>Links & Media Demo</title>
</head>
<body>

  <!-- Links -->
  <a href="https://example.com" target="_blank" rel="noopener noreferrer" title="Example">Visit Example</a>
  <a href="/files/resume.pdf" download="resume.pdf">Download Resume</a>

  <!-- Picture with responsive sources -->
  <picture>
    <source media="(min-width:800px)" srcset="hero-large.webp" type="image/webp">
    <img src="hero.jpg" alt="Hero image" width="800">
  </picture>

  <!-- Image with srcset -->
  <img src="thumb.jpg" alt="Thumbnail"
       srcset="thumb-400.jpg 400w, thumb-800.jpg 800w"
       sizes="(max-width:600px) 400px, 800px"
       loading="lazy">

  <!-- Audio -->
  <audio controls>
    <source src="music.mp3" type="audio/mpeg">
    Your browser doesn't support audio.
  </audio>

  <!-- Video with subtitles -->
  <video width="480" controls poster="poster.jpg">
    <source src="clip.mp4" type="video/mp4">
    <track kind="subtitles" src="en.vtt" srclang="en" label="English">
  </video>

  <!-- Iframe (YouTube embed) -->
  <iframe src="https://www.youtube.com/embed/VIDEO_ID" width="560" height="315"
          title="Video" frameborder="0" allowfullscreen></iframe>

  <!-- Image map -->
  <img src="map.png" alt="Clickable map" usemap="#map1">
  <map name="map1">
    <area shape="rect" coords="0,0,100,100" href="region1.html" alt="Region 1">
  </map>

</body>
</html>


---

ðŸ“˜ Section 5 â€” Lists

<ul> â€” Unordered list

Creates a bulleted list. Use CSS to style bullets; only global attributes are common.

<!-- Unordered list; no special attributes required here -->
<ul>
  <!-- <li> is each list item -->
  <li>Milk <!-- simple list item --></li>
  <li>Bread</li>
  <li>Cheese</li>
</ul>


---

<ol> â€” Ordered list

Creates a numbered (or lettered/roman) list. Useful attributes: type, start, reversed.

<!-- Ordered list with attributes:
     type="A" -> use uppercase letters (A, B, C)
     start="5" -> start numbering at 5 (or letter that corresponds)
     reversed -> count downwards
-->
<ol type="A" start="5" reversed>
  <li>Step One <!-- displayed as E (since start=5 -> E) --></li>
  <li>Step Two <!-- displayed as D --></li>
  <li>Step Three <!-- displayed as C --></li>
</ol>


---

<li> â€” List item

An item inside <ul> or <ol>. Can contain almost any flow content (text, links, nested lists). Use value on <li> only inside <ol> to override numbering for that item.

<!-- Individual list item examples -->
<ul>
  <li id="first-item">First item <!-- id used for linking or CSS --></li>
  <li class="highlight">Second item <!-- class for styling --></li>
  <li>
    Nested list example:
    <!-- nested lists are allowed -->
    <ul>
      <li>Nested A</li>
      <li>Nested B</li>
    </ul>
  </li>
</ul>

<!-- Using value on an <li> inside an <ol> -->
<ol>
  <li value="10">This item shows number 10 (overrides auto numbering)</li>
  <li>Auto next (11)</li>
</ol>


---

<dl>, <dt>, <dd> â€” Description (definition) list

Use <dl> to pair terms (<dt>) with definitions (<dd>). Semantically for glossaries, FAQs, etc.

<!-- Description list: <dt> is the term, <dd> is the description -->
<dl>
  <dt>HTML</dt>
  <dd>HyperText Markup Language â€” markup for web pages.</dd>

  <dt>API</dt>
  <dd>Application Programming Interface â€” a set of functions/endpoints.</dd>
</dl>


---

âœ… Combined Example â€” Lists (all together)

<!-- Combined lists example with comments -->
<section>
  <h3>Groceries</h3>
  <ul>
    <li>Apples</li>
    <li>Bananas</li>
  </ul>

  <h3>Priority Steps</h3>
  <ol start="1">
    <li>Wake up</li>
    <li>Study</li>
  </ol>

  <h3>Glossary</h3>
  <dl>
    <dt>DOM</dt>
    <dd>Document Object Model â€” programmatic structure of a webpage.</dd>
  </dl>
</section>


---

ðŸ“˜ Section 6 â€” Tables

<table> â€” Table container

Wrapper for tabular data. Prefer CSS for styling (avoid deprecated attributes like border in production).

<!-- Basic table structure -->
<table>
  <!-- rows and cells go here -->
</table>


---

<caption> â€” Table caption/title

Provides an accessible title for the table (useful for screen readers).

<table>
  <caption>Student Marks â€” Semester 1</caption> <!-- Human-readable title for table -->
  <tr><th>Name</th><th>Marks</th></tr>
  <tr><td>Alice</td><td>95</td></tr>
</table>


---

<thead>, <tbody>, <tfoot> â€” Row groups

Wrap header, body, and footer rows for semantic grouping and easier styling.

<table>
  <thead>
    <tr>
      <th scope="col">Name</th> <!-- scope="col" indicates header applies to the column -->
      <th scope="col">Subject</th>
      <th scope="col">Score</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>Alice</td>
      <td>Math</td>
      <td>95</td>
    </tr>
  </tbody>
  <tfoot>
    <tr>
      <td colspan="3">End of results</td> <!-- colspan merges columns -->
    </tr>
  </tfoot>
</table>


---

<tr> â€” Table row

Contains cells (<th>/<td>).

<tr>
  <td>Row item 1</td>
  <td>Row item 2</td>
</tr>


---

<th> â€” Header cell

Header cell (default bold/centered). Important attributes: scope (e.g., col, row) and abbr (abbreviation).

<!-- Column header with scope for accessibility and abbr if header is long -->
<tr>
  <th scope="col" abbr="Student Name">Name</th>
  <th scope="col">Marks</th>
</tr>


---

<td> â€” Data cell

Standard cell for table data. Attributes: colspan, rowspan, headers (IDs of header cells it relates to).

<!-- Cell spanning columns and rows -->
<tr>
  <td colspan="2">Merged across 2 columns</td> <!-- colspan example -->
  <td>Regular cell</td>
</tr>

<tr>
  <td rowspan="2">Spans two rows</td> <!-- rowspan example -->
  <td>Row 2, Col 2</td>
  <td>Row 2, Col 3</td>
</tr>
<tr>
  <td>Row 3, Col 2</td>
  <td>Row 3, Col 3</td>
</tr>


---

<colgroup> & <col> â€” Column grouping & styling

Apply styles/attributes to whole columns.

<table>
  <!-- style first column differently -->
  <colgroup>
    <col style="background: #f2f2f2"> <!-- applies to first column -->
    <col span="2"> <!-- next two columns share default style -->
  </colgroup>

  <thead>
    <tr><th>Name</th><th>Math</th><th>Science</th></tr>
  </thead>
  <tbody>
    <tr><td>Bob</td><td>80</td><td>85</td></tr>
  </tbody>
</table>


---

Accessibility: headers and scope

Use scope on <th> and headers on <td> to associate cells for screen readers (helpful for complex tables).

<!-- Example using headers attribute:
     header cell IDs are referenced by td.headers for complex associations -->
<table>
  <tr>
    <th id="h-name" scope="col">Name</th>
    <th id="h-score" scope="col">Score</th>
  </tr>
  <tr>
    <td headers="h-name">Charlie</td> <!-- connects to header h-name -->
    <td headers="h-score">88</td>
  </tr>
</table>


---

âœ… Combined Example â€” Tables (complete)

<table>
  <caption>Exam Results</caption>
  <colgroup>
    <col style="width:40%">
    <col span="2" style="width:30%">
  </colgroup>

  <thead>
    <tr>
      <th scope="col">Student</th>
      <th scope="col">Math</th>
      <th scope="col">Science</th>
    </tr>
  </thead>

  <tbody>
    <tr>
      <td>Alice</td>
      <td>95</td>
      <td>90</td>
    </tr>
    <tr>
      <!-- combine two columns to show 'Absent' -->
      <td>Bob</td>
      <td colspan="2" align="center">Absent</td>
    </tr>
    <tr>
      <!-- row-spanning example -->
      <td rowspan="2">Charlie</td>
      <td>76</td>
      <td>85</td>
    </tr>
    <tr>
      <td>89</td>
      <td>92</td>
    </tr>
  </tbody>

  <tfoot>
    <tr>
      <td>Total Students</td>
      <td colspan="2">3</td>
    </tr>
  </tfoot>
</table>


---

ðŸ“˜ Section 7 â€” Forms (detailed): Basics & common input types

> This section is more detailed because forms are critical. Each tag below has a short outside explanation and an in-code example with comments explaining each attribute's role in that scenario.



<form> â€” Form container

Wraps form controls; key attributes: action, method, enctype, autocomplete, target, novalidate.

<!-- Form posting to /submit with file upload encoding type -->
<form action="/submit" method="post" enctype="multipart/form-data" autocomplete="on" target="_self">
  <!-- action="/submit" -> server endpoint that receives form data -->
  <!-- method="post" -> secure POST request (not in URL) -->
  <!-- enctype="multipart/form-data" -> required for file uploads -->
  <!-- autocomplete="on" -> browser may autofill fields -->
  <!-- target="_self" -> response opens in same tab -->
</form>


---

<label> â€” Label for inputs

Associates text with a control using for matching input's id, improving accessibility and click focus.

<!-- Label using for attribute to bind to input by id -->
<label for="email">Email:</label>
<input id="email" name="email" type="email" placeholder="you@example.com">
<!-- Clicking the label focuses the associated input -->


---

<input type="text"> â€” Single-line text

Common attributes: name, id, value, placeholder, required, maxlength, minlength, pattern, autocomplete, autofocus, readonly, disabled, inputmode.

<!-- Text input with validation constraints and autofocus -->
<label for="username">Username</label>
<input id="username" name="username" type="text" placeholder="Enter username"
       required minlength="3" maxlength="20" autocomplete="username" autofocus>
<!-- required -> cannot submit empty
     minlength / maxlength -> client-side limits
     autocomplete -> helps browsers prefill
     autofocus -> focuses this field on page load -->


---

<input type="password"> â€” Password field

<label for="pwd">Password</label>
<input id="pwd" name="password" type="password" placeholder="Enter password" required minlength="6">
<!-- type="password" masks input
     minlength encourages stronger passwords -->


---

<input type="email">, type="url", type="tel" â€” semantic input types

Browser performs format validation and may show specialized keyboard on mobiles.

<label for="user-email">Email</label>
<input id="user-email" name="email" type="email" placeholder="name@example.com" required>
<!-- type="email" enforces email format -->

<label for="website">Website</label>
<input id="website" name="website" type="url" placeholder="https://example.com">

<label for="phone">Phone</label>
<input id="phone" name="phone" type="tel" inputmode="tel" placeholder="+91-XXXXXXXXXX">
<!-- inputmode="tel" hints mobile keyboards to show numeric keypad -->


---

<input type="number"> / type="range" â€” numeric inputs

Use min, max, step for constraints.

<label for="age">Age</label>
<input id="age" name="age" type="number" min="1" max="120" value="18">
<!-- min/max enforce range; value provides default -->

<label for="volume">Volume</label>
<input id="volume" name="volume" type="range" min="0" max="100" step="5" value="50">
<!-- range provides slider UI; step defines increments -->


---

<input type="date">, time, datetime-local, month, week

Browser-native pickers (support varies). Use min/max for ranges.

<label for="dob">Date of Birth</label>
<input id="dob" name="dob" type="date" min="1900-01-01" max="2025-12-31">


---

<input type="file"> â€” file upload

Attributes: accept (MIME types or extensions), multiple.

<label for="resume">Upload resume (PDF)</label>
<input id="resume" name="resume" type="file" accept=".pdf,application/pdf" required>
<!-- accept restricts selectable files; required forces upload -->

<label for="photos">Upload photos (multiple)</label>
<input id="photos" name="photos" type="file" accept="image/*" multiple>
<!-- multiple allows selecting multiple files -->


---

<input type="checkbox"> & <input type="radio"> â€” choices

Checkboxes allow multiple selections; radios with same name are mutually exclusive.

<!-- Checkbox example -->
<label><input type="checkbox" name="subscribe" value="newsletter" checked> Subscribe to newsletter</label>
<!-- checked -> default ticked -->

<!-- Radio group example -->
<p>Gender:</p>
<label><input type="radio" name="gender" value="male" checked> Male</label>
<label><input type="radio" name="gender" value="female"> Female</label>
<!-- radios with same name -> only one selected -->


---

<textarea> â€” multi-line text input

Attributes: rows, cols, maxlength, placeholder, wrap, readonly, required.

<label for="bio">Short Bio</label>
<textarea id="bio" name="bio" rows="4" cols="40" maxlength="300" placeholder="Tell us about yourself"></textarea>
<!-- rows/cols control visible size; maxlength limits characters -->


---

<select>, <option>, <optgroup> â€” dropdowns

<select> attributes: name, multiple, size. <option>: value, selected, disabled. <optgroup>: label.

<label for="country">Country</label>
<select id="country" name="country" required>
  <option value="">Select</option>
  <optgroup label="Asia">
    <option value="in" selected>India</option> <!-- selected -> default -->
    <option value="jp">Japan</option>
  </optgroup>
  <optgroup label="Europe">
    <option value="de">Germany</option>
  </optgroup>
</select>

<!-- Multiple select -->
<label for="skills">Skills</label>
<select id="skills" name="skills" multiple size="4">
  <option value="html">HTML</option>
  <option value="css">CSS</option>
  <option value="js">JavaScript</option>
</select>
<!-- multiple + size allow choosing multiple items -->


---

<button> â€” buttons

type: submit, reset, button. Can have name and value for submission.

<button type="submit">Submit</button> <!-- submits form -->
<button type="reset">Reset</button>   <!-- resets fields -->
<button type="button" onclick="alert('clicked')">Click me</button> <!-- JS-only button -->


---

Validation: pattern, required, minlength, maxlength

Browser enforces client-side checks before submit. Use title to show hint for pattern.

<label for="zipcode">Zip code</label>
<input id="zipcode" name="zipcode" pattern="\d{5}" title="5 digit zip" required>
<!-- pattern enforces 5 digits, title explains requirement to user -->


---

Hidden & form-association attributes: form, name, formaction

Inputs can target a different form using form attribute; formaction overrides form action on buttons.

<!-- Hidden input included in submission -->
<input type="hidden" name="session" value="abc123">

<!-- Button overrides form action -->
<form id="f1" action="/save" method="post">
  <!-- ... -->
  <button type="submit" formaction="/save-and-email">Save & Email</button>
</form>


---

âœ… Combined Section-7 example (full form with comments)

<!-- Registration form example demonstrating many attributes -->
<form action="/register" method="post" enctype="multipart/form-data" autocomplete="on">
  <!-- Personal details -->
  <fieldset>
    <legend>Personal Details</legend>

    <!-- Text input with validation -->
    <label for="username">Username:</label>
    <input id="username" name="username" type="text" required minlength="3" maxlength="20" placeholder="Your username">
    <!-- required ensures the field is filled before submit -->

    <!-- Email with semantic type -->
    <label for="email">Email:</label>
    <input id="email" name="email" type="email" placeholder="name@example.com" required>

    <!-- Password -->
    <label for="pwd">Password:</label>
    <input id="pwd" name="password" type="password" minlength="8" required>
  </fieldset>

  <!-- Preferences -->
  <fieldset>
    <legend>Preferences</legend>
    <!-- Checkbox -->
    <label><input type="checkbox" name="newsletter" value="yes" checked> Subscribe</label>

    <!-- Radio -->
    <p>Preferred contact:</p>
    <label><input type="radio" name="contact" value="email" checked> Email</label>
    <label><input type="radio" name="contact" value="phone"> Phone</label>

    <!-- Select with optgroup -->
    <label for="country">Country:</label>
    <select id="country" name="country" required>
      <option value="">Choose</option>
      <optgroup label="Asia">
        <option value="in">India</option>
        <option value="jp">Japan</option>
      </optgroup>
    </select>
  </fieldset>

  <!-- Upload and message -->
  <fieldset>
    <legend>Extras</legend>

    <!-- File input -->
    <label for="resume">Resume (PDF)</label>
    <input id="resume" name="resume" type="file" accept=".pdf,application/pdf">

    <!-- Textarea -->
    <label for="bio">Bio</label>
    <textarea id="bio" name="bio" rows="4" cols="50" maxlength="500" placeholder="Short bio"></textarea>
  </fieldset>

  <!-- Buttons -->
  <button type="submit">Register</button>
  <button type="reset">Reset</button>
</form>


---

ðŸ“˜ Section 8 â€” Forms (advanced controls & UI helpers)

<fieldset> & <legend> (grouping)

Group related controls and provide a legend caption.

<fieldset>
  <legend>Billing Address</legend>
  <label for="addr">Address:</label>
  <input id="addr" name="address" type="text">
</fieldset>


---

<datalist> â€” suggestions for <input>

Provides autocomplete suggestions for an <input list="id">.

<label for="browser">Browser</label>
<input id="browser" name="browser" list="browsers" placeholder="Choose or type">

<datalist id="browsers">
  <option value="Chrome">
  <option value="Firefox">
  <option value="Edge">
</datalist>
<!-- User can type custom value or select from list -->


---

<output> â€” shows calculation results

Used with forms and JS to show computed values. The for attribute can reference inputs.

<!-- Simple oninput calculation showing output element -->
<form oninput="sum.value = (parseInt(a.value)||0) + (parseInt(b.value)||0)">
  <input id="a" name="a" type="number" value="10"> +
  <input id="b" name="b" type="number" value="20"> =
  <output name="sum">30</output> <!-- value updated by oninput JS expression -->
</form>


---

<progress> â€” progress bar

Represents progress toward a task. value and max define progress.

<!-- Progress at 60% (value/max) -->
<progress value="60" max="100">60%</progress>


---

<meter> â€” scalar gauge

Shows a scalar value within a known range; attributes: min, max, low, high, optimum.

<!-- Example: battery level, 0.7 out of 1 -->
<meter value="0.7" min="0" max="1" low="0.2" high="0.9" optimum="1">70%</meter>


---

Accessibility helpers and input hints

aria-* attributes (e.g., aria-label, aria-describedby) to help assistive tech.

inputmode and autocomplete to improve mobile input experience.


<!-- Input with aria and inputmode hints for better accessibility & keyboard -->
<label for="mobile">Mobile</label>
<input id="mobile" name="mobile" type="tel" inputmode="tel" autocomplete="tel" aria-label="Mobile phone number" placeholder="+91-">


---

<summary> / <details> as form-like UI (disclosure)

Useful for grouping optional settings.

<details>
  <summary>Advanced settings</summary>
  <label><input type="checkbox" name="opt1"> Option 1</label>
  <label><input type="checkbox" name="opt2"> Option 2</label>
</details>


---

âœ… Combined Section-8 example (advanced controls + helpers)

<form>
  <fieldset>
    <legend>Survey</legend>

    <!-- Datalist suggestion -->
    <label for="city">City</label>
    <input id="city" name="city" list="cities" placeholder="Start typing...">
    <datalist id="cities">
      <option value="Mumbai">
      <option value="Delhi">
      <option value="Bengaluru">
    </datalist>

    <!-- Output example -->
    <label>Numbers</label>
    <input id="n1" type="number" value="5">
    <input id="n2" type="number" value="10">
    <output name="total">15</output>

    <!-- Progress and meter -->
    <label>Download Progress</label>
    <progress value="45" max="100">45%</progress>

    <label>Health</label>
    <meter value="0.6" min="0" max="1" low="0.2" high="0.8" optimum="1">60%</meter>
  </fieldset>

  <button type="submit">Submit</button>
</form>


---

That completes Sections 5â€“8 rewritten with per-tag explanations outside and examples with inline HTML comments inside showing how each attribute works in that scenario.
